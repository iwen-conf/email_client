syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "proto/email_client_pb";

package email;

// EmailService 定义邮件相关操作的服务
service EmailService {
  // GetSentEmails 获取已发送邮件列表，支持分页查询
  rpc GetSentEmails(GetSentEmailsRequest) returns (GetSentEmailsResponse);
  // SendEmail 发送单封邮件
  rpc SendEmail(SendEmailRequest) returns (SendEmailResponse);
  // SendEmails 批量发送多封邮件
  rpc SendEmails(SendEmailsRequest) returns (SendEmailsResponse);
}

// EmailConfigService 定义邮件配置相关操作的服务
service EmailConfigService {
  // CreateConfig 创建新的邮件配置
  rpc CreateConfig(CreateConfigRequest) returns (ConfigResponse);
  // GetConfig 根据ID获取指定邮件配置
  rpc GetConfig(GetConfigRequest) returns (ConfigResponse);
  // UpdateConfig 更新指定邮件配置
  rpc UpdateConfig(UpdateConfigRequest) returns (ConfigResponse);
  // DeleteConfig 删除指定邮件配置
  rpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigResponse);
  // ListConfigs 获取所有邮件配置列表，支持分页
  rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse);
  // TestConfig 测试邮件配置是否可用
  rpc TestConfig(TestConfigRequest) returns (TestConfigResponse);
}

// Attachment 代表一个邮件附件
message Attachment {
  string filename = 1;      // 附件文件名
  bytes content = 2;        // 附件内容
  string content_type = 3;  // 内容类型(MIME类型)
  int64 size = 4;           // 附件大小(字节)
}

// Email 代表一封邮件的结构
message Email {
  string title = 1;          // 邮件标题
  bytes content = 2;         // 邮件内容
  string from = 3;           // 发件人地址
  repeated string to = 4;    // 收件人地址列表
  string id = 5;             // 邮件唯一ID
  google.protobuf.Timestamp sent_at = 6; // 邮件发送时间
  repeated Attachment attachments = 7;   // 邮件附件列表
  string email_type = 8;     // 邮件类型: normal或test
}

// EmailConfig 代表邮件服务器配置
message EmailConfig {
  string id = 1;             // 配置唯一ID
  enum Protocol {
    SMTP = 0;                // SMTP协议，用于发送邮件
    POP3 = 1;                // POP3协议，用于接收邮件
    IMAP = 2;                // IMAP协议，用于接收邮件
  }
  Protocol protocol = 2;     // 邮件协议类型
  string server = 3;         // 邮件服务器地址
  int32 port = 4;            // 邮件服务器端口
  bool use_ssl = 5;          // 是否使用SSL加密连接
  string username = 6;       // 登录用户名
  string password = 7;       // 登录密码
  int32 timeout = 8;         // 连接超时时间（秒）
  google.protobuf.Timestamp created_at = 9;  // 配置创建时间
  google.protobuf.Timestamp updated_at = 10; // 配置更新时间
  string name = 11;          // 配置名称，用于标识
  string description = 12;   // 配置描述，说明用途或详情
}

// CreateConfigRequest 创建邮件配置的请求
message CreateConfigRequest {
  EmailConfig config = 1;    // 待创建的邮件配置信息
}

// GetConfigRequest 获取邮件配置的请求
message GetConfigRequest {
  string id = 1;             // 待查询的配置ID
}

// UpdateConfigRequest 更新邮件配置的请求
message UpdateConfigRequest {
  EmailConfig config = 1;    // 待更新的邮件配置信息
}

// DeleteConfigRequest 删除邮件配置的请求
message DeleteConfigRequest {
  string id = 1;             // 待删除的配置ID
}

// DeleteConfigResponse 删除邮件配置的响应
message DeleteConfigResponse {
  bool success = 1;          // 是否删除成功
  string message = 2;        // 操作结果提示信息
}

// ConfigResponse 邮件配置操作的通用响应
message ConfigResponse {
  bool success = 1;          // 操作是否成功
  string message = 2;        // 操作结果提示信息
  EmailConfig config = 3;    // 相关的邮件配置信息
}

// ListConfigsRequest 获取邮件配置列表的请求
message ListConfigsRequest {
  string cursor = 1;             // 游标，用于分页查询。为空表示从最新开始查询
  int32 limit = 2;               // 返回记录数限制，默认20，最大50
}

// ListConfigsResponse 获取邮件配置列表的响应
message ListConfigsResponse {
  repeated EmailConfig configs = 1; // 配置列表
  string next_cursor = 2;        // 下一页的游标，为空表示没有更多数据
  bool has_more = 3;             // 是否还有更多数据
  int32 total = 4;               // 总记录数（可选）
}

// TestConfigRequest 测试邮件配置的请求
message TestConfigRequest {
  EmailConfig config = 1;    // 待测试的邮件配置信息
}

// TestConfigResponse 测试邮件配置的响应
message TestConfigResponse {
  bool success = 1;          // 测试是否成功
  string message = 2;        // 测试结果详细说明
}

// GetSentEmailsRequest 获取已发送邮件列表的请求
message GetSentEmailsRequest {
  string cursor = 1;             // 游标，用于分页查询。为空表示从最新开始查询
  int32 limit = 2;               // 返回记录数限制，默认20，最大100
  string email_type = 3;         // 邮件类型过滤，为空表示所有类型
}

// GetSentEmailsResponse 获取已发送邮件列表的响应
message GetSentEmailsResponse {
  repeated Email emails = 1;     // 已发送邮件列表
  string next_cursor = 2;        // 下一页的游标，为空表示没有更多数据
  bool has_more = 3;             // 是否还有更多数据
  int32 total = 4;               // 总记录数（可选，性能考虑可能不返回）
}

// SendEmailRequest 发送单封邮件的请求
message SendEmailRequest {
  Email email = 1;           // 待发送的邮件信息
  string config_id = 2;      // 使用的邮件配置ID
}

// SendEmailResponse 发送单封邮件的响应
message SendEmailResponse {
  bool success = 1;          // 是否发送成功
  string message = 2;        // 发送结果提示信息
  string email_id = 3;       // 发送成功后的邮件ID
}

// SendEmailsRequest 批量发送邮件的请求
message SendEmailsRequest {
  repeated Email emails = 1; // 待发送的邮件列表
  string config_id = 2;      // 使用的邮件配置ID
}

// SendEmailsResponse 批量发送邮件的响应
message SendEmailsResponse {
  bool success = 1;          // 是否全部发送成功
  string message = 2;        // 发送结果提示信息
  repeated string email_ids = 3; // 发送成功的邮件ID列表
}

// HealthService 定义健康检查服务
service HealthService {
  // Check 检查服务的健康状态
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// HealthCheckRequest 健康检查请求
message HealthCheckRequest {
  // service 是要检查的服务名称。如果为空，则检查整体服务器健康状况。
  string service = 1;
}

// HealthCheckResponse 健康检查响应
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVING_UNHEALTHY = 3; // 服务正在运行，但内部存在问题
  }
  ServingStatus status = 1; // 服务的状态
  string message = 2;       // 额外的状态信息
}
