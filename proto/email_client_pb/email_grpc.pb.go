// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/email.proto

package email_client_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_GetSentEmails_FullMethodName = "/email.EmailService/GetSentEmails"
	EmailService_SendEmail_FullMethodName     = "/email.EmailService/SendEmail"
	EmailService_SendEmails_FullMethodName    = "/email.EmailService/SendEmails"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailService 定义邮件相关操作的服务
type EmailServiceClient interface {
	// GetSentEmails 获取已发送邮件列表，支持分页查询
	GetSentEmails(ctx context.Context, in *GetSentEmailsRequest, opts ...grpc.CallOption) (*GetSentEmailsResponse, error)
	// SendEmail 发送单封邮件
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	// SendEmails 批量发送多封邮件
	SendEmails(ctx context.Context, in *SendEmailsRequest, opts ...grpc.CallOption) (*SendEmailsResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) GetSentEmails(ctx context.Context, in *GetSentEmailsRequest, opts ...grpc.CallOption) (*GetSentEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSentEmailsResponse)
	err := c.cc.Invoke(ctx, EmailService_GetSentEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailService_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendEmails(ctx context.Context, in *SendEmailsRequest, opts ...grpc.CallOption) (*SendEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailsResponse)
	err := c.cc.Invoke(ctx, EmailService_SendEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
//
// EmailService 定义邮件相关操作的服务
type EmailServiceServer interface {
	// GetSentEmails 获取已发送邮件列表，支持分页查询
	GetSentEmails(context.Context, *GetSentEmailsRequest) (*GetSentEmailsResponse, error)
	// SendEmail 发送单封邮件
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	// SendEmails 批量发送多封邮件
	SendEmails(context.Context, *SendEmailsRequest) (*SendEmailsResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) GetSentEmails(context.Context, *GetSentEmailsRequest) (*GetSentEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentEmails not implemented")
}
func (UnimplementedEmailServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailServiceServer) SendEmails(context.Context, *SendEmailsRequest) (*SendEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmails not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_GetSentEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).GetSentEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_GetSentEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).GetSentEmails(ctx, req.(*GetSentEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_SendEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendEmails(ctx, req.(*SendEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSentEmails",
			Handler:    _EmailService_GetSentEmails_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _EmailService_SendEmail_Handler,
		},
		{
			MethodName: "SendEmails",
			Handler:    _EmailService_SendEmails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/email.proto",
}

const (
	EmailConfigService_CreateConfig_FullMethodName = "/email.EmailConfigService/CreateConfig"
	EmailConfigService_GetConfig_FullMethodName    = "/email.EmailConfigService/GetConfig"
	EmailConfigService_UpdateConfig_FullMethodName = "/email.EmailConfigService/UpdateConfig"
	EmailConfigService_DeleteConfig_FullMethodName = "/email.EmailConfigService/DeleteConfig"
	EmailConfigService_ListConfigs_FullMethodName  = "/email.EmailConfigService/ListConfigs"
	EmailConfigService_TestConfig_FullMethodName   = "/email.EmailConfigService/TestConfig"
)

// EmailConfigServiceClient is the client API for EmailConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmailConfigService 定义邮件配置相关操作的服务
type EmailConfigServiceClient interface {
	// CreateConfig 创建新的邮件配置
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// GetConfig 根据ID获取指定邮件配置
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// UpdateConfig 更新指定邮件配置
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	// DeleteConfig 删除指定邮件配置
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	// ListConfigs 获取所有邮件配置列表，支持分页
	ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error)
	// TestConfig 测试邮件配置是否可用
	TestConfig(ctx context.Context, in *TestConfigRequest, opts ...grpc.CallOption) (*TestConfigResponse, error)
}

type emailConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailConfigServiceClient(cc grpc.ClientConnInterface) EmailConfigServiceClient {
	return &emailConfigServiceClient{cc}
}

func (c *emailConfigServiceClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_CreateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailConfigServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailConfigServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailConfigServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_DeleteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailConfigServiceClient) ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigsResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_ListConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailConfigServiceClient) TestConfig(ctx context.Context, in *TestConfigRequest, opts ...grpc.CallOption) (*TestConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestConfigResponse)
	err := c.cc.Invoke(ctx, EmailConfigService_TestConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailConfigServiceServer is the server API for EmailConfigService service.
// All implementations must embed UnimplementedEmailConfigServiceServer
// for forward compatibility.
//
// EmailConfigService 定义邮件配置相关操作的服务
type EmailConfigServiceServer interface {
	// CreateConfig 创建新的邮件配置
	CreateConfig(context.Context, *CreateConfigRequest) (*ConfigResponse, error)
	// GetConfig 根据ID获取指定邮件配置
	GetConfig(context.Context, *GetConfigRequest) (*ConfigResponse, error)
	// UpdateConfig 更新指定邮件配置
	UpdateConfig(context.Context, *UpdateConfigRequest) (*ConfigResponse, error)
	// DeleteConfig 删除指定邮件配置
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	// ListConfigs 获取所有邮件配置列表，支持分页
	ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error)
	// TestConfig 测试邮件配置是否可用
	TestConfig(context.Context, *TestConfigRequest) (*TestConfigResponse, error)
	mustEmbedUnimplementedEmailConfigServiceServer()
}

// UnimplementedEmailConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailConfigServiceServer struct{}

func (UnimplementedEmailConfigServiceServer) CreateConfig(context.Context, *CreateConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedEmailConfigServiceServer) GetConfig(context.Context, *GetConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedEmailConfigServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedEmailConfigServiceServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedEmailConfigServiceServer) ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedEmailConfigServiceServer) TestConfig(context.Context, *TestConfigRequest) (*TestConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConfig not implemented")
}
func (UnimplementedEmailConfigServiceServer) mustEmbedUnimplementedEmailConfigServiceServer() {}
func (UnimplementedEmailConfigServiceServer) testEmbeddedByValue()                            {}

// UnsafeEmailConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailConfigServiceServer will
// result in compilation errors.
type UnsafeEmailConfigServiceServer interface {
	mustEmbedUnimplementedEmailConfigServiceServer()
}

func RegisterEmailConfigServiceServer(s grpc.ServiceRegistrar, srv EmailConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailConfigService_ServiceDesc, srv)
}

func _EmailConfigService_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_CreateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailConfigService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailConfigService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailConfigService_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).ListConfigs(ctx, req.(*ListConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailConfigService_TestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailConfigServiceServer).TestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailConfigService_TestConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailConfigServiceServer).TestConfig(ctx, req.(*TestConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailConfigService_ServiceDesc is the grpc.ServiceDesc for EmailConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailConfigService",
	HandlerType: (*EmailConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _EmailConfigService_CreateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _EmailConfigService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _EmailConfigService_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _EmailConfigService_DeleteConfig_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _EmailConfigService_ListConfigs_Handler,
		},
		{
			MethodName: "TestConfig",
			Handler:    _EmailConfigService_TestConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/email.proto",
}
